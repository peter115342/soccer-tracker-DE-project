name: Terraform CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - main
  push:
    branches:
      - main
      - dev
    paths:
      - "terraform/**"

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          pip install uv

      - name: Create Virtual Environment
        run: |
          uv venv

      - name: Install dependencies using uv
        run: |
          uv pip install -e .

      - name: Run mypy
        run: |
          uv run mypy --namespace-packages --explicit-package-bases .

      - name: Run ruff
        run: |
          uv run ruff check .

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{secrets.GCP_SA_KEY}}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{secrets.GCP_PROJECT_ID}}

      - name: Run Tests
        env:
          API_FOOTBALL_KEY: "dummy_key"
          GOOGLE_MAPS_API_KEY: "dummy_key"
          GCP_PROJECT_ID: "dummy_id"
          REDDIT_CLIENT_ID: "dummy_id"
          REDDIT_CLIENT_SECRET: "dummy_key"
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          uv run pytest tests/

      - name: Create Terraform State Bucket
        env:
          BUCKET_NAME: ${{ secrets.GCP_PROJECT_ID }}-terraform-state
        run: |
          gsutil ls gs://$BUCKET_NAME || gsutil mb -l europe-central2 gs://$BUCKET_NAME

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        env:
          BUCKET_NAME: ${{ secrets.GCP_PROJECT_ID }}-terraform-state
        run: |
          cd terraform
          echo "bucket = \"$BUCKET_NAME\"" > backend.hcl
          echo "prefix = \"terraform/state\"" >> backend.hcl
          terraform init -backend-config=backend.hcl

      - name: Terraform Format
        run: |
          cd terraform
          terraform fmt

      - name: Terraform Plan
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_bucket_name: ${{ secrets.BUCKET_NAME }}
          TF_VAR_api_football_key: ${{ secrets.API_FOOTBALL_KEY }}
          TF_VAR_discord_webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          TF_VAR_google_maps_api_key: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          TF_VAR_reddit_client_id: ${{ secrets.REDDIT_CLIENT_ID }}
          TF_VAR_reddit_client_secret: ${{ secrets.REDDIT_CLIENT_SECRET }}
          TF_VAR_dataform_repository: ${{ secrets.DATAFORM_REPOSITORY }}
          TF_VAR_dataform_workspace: ${{ secrets.DATAFORM_WORKSPACE }}
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'main'
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_bucket_name: ${{ secrets.BUCKET_NAME }}
          TF_VAR_api_football_key: ${{ secrets.API_FOOTBALL_KEY }}
          TF_VAR_discord_webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          TF_VAR_google_maps_api_key: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          TF_VAR_reddit_client_id: ${{ secrets.REDDIT_CLIENT_ID }}
          TF_VAR_reddit_client_secret: ${{ secrets.REDDIT_CLIENT_SECRET }}
          TF_VAR_dataform_repository: ${{ secrets.DATAFORM_REPOSITORY }}
          TF_VAR_dataform_workspace: ${{ secrets.DATAFORM_WORKSPACE }}
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
